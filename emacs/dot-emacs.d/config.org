#+TITLE: My Emacs Configuration
#+AUTHOR: han1475
#+EMAIL: me@han1475.com
#+OPTIONS: num:nil

Keep It Simple & Stupid

* Core

** lexical binding
#+BEGIN_SRC emacs-lisp
  ;; -*- lexical-binding: t -*-
#+END_SRC 

** custom file
use custom.el to avoid rewrite init.el when emacs startup
#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file) 
    (load custom-file))
#+END_SRC

** melpa
#+BEGIN_SRC emacs-lisp
  (setq package-archives 
	'(("gnu" . "http://elpa.emacs-china.org/gnu/")
	  ("melpa" . "http://elpa.emacs-china.org/melpa/")
	  ("melpa-stable" . "http://elpa.emacs-china.org/melpa-stable/")))
  (package-initialize)
#+END_SRC 

** On-demand installation of packages
#+BEGIN_SRC emacs-lisp
  (defun require-package (package)
    "Ensures that PACKAGE is installed."
    (unless (or (package-installed-p package)
		(require package nil 'noerror))
      (unless (assoc package package-archive-contents)
	(package-refresh-contents))
      (package-install package)))
#+END_SRC

** macro =after= of =with-eval-after-load=
with-eval-after-load lets you defer execution of code until after a feature has 
been loaded. This is used extensively throughout the config, so 
wrapping macro has been written for ease of use. 
This is what keeps the config loading fast.

#+BEGIN_SRC emacs-lisp
  (defmacro after (feature &rest body)
    "Executes BODY after FEATURE has been loaded.
  FEATURE may be any one of:
      'evil            => (with-eval-after-load 'evil BODY)
      \"evil-autoloads\" => (with-eval-after-load \"evil-autolaods\" BODY)
      [evil cider]     => (with-eval-after-load 'evil
			    (with-eval-after-load 'cider
			      BODY))
  "
    (declare (indent 1))
    (cond
     ((vectorp feature)
      (let ((prog (macroexp-progn body)))
	(cl-loop for f across feature
		 do
		 (progn
		   (setq prog (append `(',f) `(,prog)))
		   (setq prog (append '(with-eval-after-load) prog))))
	prog))
     (t
      `(with-eval-after-load ,feature ,@body))))
#+END_SRC

** Auto-insert matching delimiters
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs
	'((?\" . ?\")
	  (?\` . ?\`)
	  (?\( . ?\))
	  (?\{ . ?\})
	  (?\~ . ?\~)))
  (add-hook 'text-mode-hook #'electric-pair-mode)
  (add-hook 'prog-mode-hook #'electric-pair-mode)
#+END_SRC

** Backup
#+BEGIN_SRC emacs-lisp
  (let* ((backup-dir (expand-file-name "~/.backups")))
    (unless (file-exists-p backup-dir) (make-directory backup-dir))
    (setq backup-by-copying t ; don't clobber symlinks
          backup-directory-alist (list (cons "." backup-dir))
          delete-old-versions t
          version-control t  ;use versioned backups
          kept-new-versions 8
          kept-old-versions 4))
#+END_SRC
* UI
** Menu Bar
Disable Menu Bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC
** Scroll Bar
Remove Scroll Bar
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
#+END_SRC
** Tool Bar
Remove Tool Bar
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'tool-bar-mode)
     (tool-bar-mode -1))
#+END_SRC
** Startup Screen
#+BEGIN_SRC emacs-lisp
  ;; disable startup screen
  (setq inhibit-startup-screen t)
#+END_SRC
** Line numbers
Prevent Extraneous Tabs 
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
Display line numbers
#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-width 2)
  (setq display-line-numbers-grow-only t) 
  (global-display-line-numbers-mode t)
#+END_SRC
** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC
** Eighty Column Rule
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
  (global-display-fill-column-indicator-mode)
#+END_SRC
** Cursor place
Cursor goes where it was when you previously visited this file
#+BEGIN_SRC emacs-lisp
  (setq save-place-forget-unreadable-files nil)
  (setq save-place-file (locate-user-emacs-file ".emacs-places"))
  (save-place-mode 1)
#+END_SRC
** Show matching delimiter or other character
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

* Org-mode
** basic
#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
  (setq org-startup-folded t)
#+END_SRC

** Publishing and Exporting
*** Exporter Setup
#+BEGIN_SRC emacs-lisp
  (setq org-alphabetical-lists t)

  ;; highlight for html
  (require-package 'htmlize)

  ;; Explicitly load required exporters
  (require 'ox-html)
#+END_SRC
*** Org-babel Setup
#+BEGIN_SRC emacs-lisp
  ;; Using ditaa, planuml in Arch Linux Packages.
  (setq org-ditaa-jar-path "/usr/share/java/ditaa/ditaa-0.11.jar")
  (setq org-plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")

  (defun bh/display-inline-images ()
    (condition-case nil
        (org-display-inline-images)
      (error nil)))

  (add-hook 'org-babel-after-execute-hook 'bh/display-inline-images 'append)

  ;; Make babel results blocks lowercase
  (setq org-babel-results-keyword "results")

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (js . t)
     (ditaa . t)
     (dot . t)
     (plantuml .t)
     (org . t)))
  ;; Do not prompt to confirm evaluation
  ;; This may be dangerous - make sure you understand the consequences
  ;; of setting this -- see the docstring for details
  (setq org-confirm-babel-evaluate nil)

  ;; Use fundamental mode when editing plantuml blocks with C-c '
  (add-to-list 'org-src-lang-modes  '("plantuml" . fundamental))
#+END_SRC
Now you just create a begin-src block for the appropriate tool, edit the text,
and build the pictures with C-c C-c.

After evaluating the block results are displayed. You can toggle
display of inline images with C-c C-x C-v

I disable startup with inline images because when I access my org-files from an
tty session without X this breaks it fails when trying to display the images on
a non-X session.
#+BEGIN_SRC emacs-lisp
  ;; Don't enable this because it breaks access to emacs from an tty session
  (setq org-startup-with-inline-images nil)
#+END_SRC
* Packages
** yasnippet
#+BEGIN_SRC emacs-lisp
  (defvar cached-normal-file-full-path nil)
  (defvar load-user-customized-major-mode-hook t)
  (defvar force-buffer-file-temp-p nil)

  (defun is-buffer-file-temp ()
    "If (buffer-file-name) is nil or a temp file or HTML file converted from org file."
    (interactive)
    (let* ((f (buffer-file-name)) (rlt t))
      (cond
       ((not load-user-customized-major-mode-hook)
	(setq rlt t))
       ((not f)
	;; file does not exist at all
	;; org-babel edit inline code block need calling hook
	(setq rlt nil))
       ((string= f cached-normal-file-full-path)
	(setq rlt nil))
       ((string-match (concat "^" temporary-file-directory) f)
	;; file is create from temp directory
	(setq rlt t))
       ((and (string-match "\.html$" f)
	     (file-exists-p (replace-regexp-in-string "\.html$" ".org" f)))
	;; file is a html file exported from org-mode
	(setq rlt t))
       (force-buffer-file-temp-p
	(setq rlt t))
       (t
	(setq cached-normal-file-full-path f)
	(setq rlt nil)))
      rlt))
    
  (require-package 'yasnippet)
  ;; my private snippets, should be placed before enabling yasnippet
  (setq my-yasnippets (expand-file-name "~/.emacs.d/yasnippet"))

  (defun yasnippet-generic-setup-for-mode-hook ()
    (unless (is-buffer-file-temp) (yas-minor-mode 1)))

  (add-hook 'prog-mode-hook 'yasnippet-generic-setup-for-mode-hook)
  (add-hook 'text-mode-hook 'yasnippet-generic-setup-for-mode-hook)

  (after 'yasnippet
    ;; http://stackoverflow.com/questions/7619640/emacs-latex-yasnippet-why-are-newlines-inserted-after-a-snippet
    (setq-default mode-require-final-newline nil)
    ;; (message "yas-snippet-dirs=%s" (mapconcat 'identity yas-snippet-dirs ":"))

    ;; Use `yas-dropdown-prompt' if possible. It requires `dropdown-list'.
    (setq yas-prompt-functions '(yas-dropdown-prompt
				 yas-ido-prompt
				 yas-completing-prompt))

    ;; use `yas-completing-prompt' when ONLY when `M-x yas-insert-snippet'
    ;; thanks to capitaomorte for providing the trick.
    (defadvice yas-insert-snippet (around use-completing-prompt activate)
      "Use `yas-completing-prompt' for `yas-prompt-functions' but only here..."
      (let* ((yas-prompt-functions '(yas-completing-prompt)))
	ad-do-it))

    (when (and  (file-exists-p my-yasnippets)
		(not (member my-yasnippets yas-snippet-dirs)))
      (add-to-list 'yas-snippet-dirs my-yasnippets))

    (yas-reload-all))
#+END_SRC
** Git 
*** magit & git-gutter
#+BEGIN_SRC emacs-lisp
  (require-package 'magit)
  (require-package 'git-gutter)

  (setq vc-handled-backends '(Git))

  ;; When you open a file which is a symlink to a file under version control,
  ;; automatically switch and open the actual file.  
  (setq vc-follow-symlinks t)

  ;; @see https://www.reddit.com/r/emacs/comments/4c0mi3/the_biggest_performance_improvement_to_emacs_ive/
  ;; open files faster but you can't check if file is version
  ;; controlled. other VCS functionality still works.
  (remove-hook 'find-file-hooks 'vc-find-file-hook)

  (global-git-gutter-mode t)
#+END_SRC
*** key binding
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-g") 'git-gutter)
  (global-set-key (kbd "C-x v =") 'git-gutter:popup-hunk)
  ;; Stage current hunk
  (global-set-key (kbd "C-x v s") 'git-gutter:stage-hunk)
  ;; Revert current hunk
  (global-set-key (kbd "C-x v r") 'git-gutter:revert-hunk)
#+END_SRC
*** yasnippet expand in magit-commit
#+BEGIN_SRC emacs-lisp
  ;; @see https://emacs.stackexchange.com/questions/27946/yasnippets-wont-expand-in-git-commit-mode
  ;; Yasnippets won't expand in magit-commit(git-commit-mode).
  ;; git-commit-mode is a minor mode and it's major mode is text-mode, but yasnippet expend
  ;; only in major mode and in text-mode <TAB> is
  ;; just <TAB> key mapping, so yanippet don't work.
  (setq git-commit-major-mode 'org-mode)
#+END_SRC
** ivy
#+BEGIN_SRC emacs-lisp
  (require-package 'ivy)
  (require-package 'counsel)
  (require-package 'swiper)

  (setq ivy-use-virtual-buffers t)
  ;; When runing ivy-switch-buffers, display full path of bookmarks and recent files.
  (setq ivy-virtual-abbreviate 'full)
  (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
  (setq ivy-height 16)
  (setq ivy-display-style 'fancy)
  (setq ivy-count-format "[%d/%d] ")
  (setq ivy-initial-inputs-alist nil)

  (ivy-mode t)
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  ;; Displays the key bindings following your currently entered incomplete command
  (require-package 'which-key)
  (setq which-key-idle-delay 0.2)
  (setq which-key-min-display-lines 3)

  ;; Override the default binding for "\C-h \C-h".
  (define-key help-map "\C-h" 'which-key-C-h-dispatch)

  (which-key-mode)
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (require-package 'company)
  (require-package 'company-statistics)
  (add-hook 'after-init-hook 'global-company-mode)
  (after 'company
     (company-statistics-mode)
     (unless (featurep 'company-ctags) (require-package 'company-ctags))
     (company-ctags-auto-setup)
  )
#+END_SRC
** ox-hugo
#+BEGIN_SRC emacs-lisp
  (require-package 'ox-hugo)
  (after 'ox
      (require 'ox-hugo))
  (setq org-hugo-default-section-directory "post")
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
  (require-package 'projectile)
  (setq projectile-indexing-method 'alien)
  (setq projectile-enable-caching t)
  (setq projectile-completion-system 'ivy)
  (add-hook 'after-init-hook 'projectile-mode)
#+END_SRC