#+TITLE: My Emacs Configuration
#+AUTHOR: han1475
#+EMAIL: me@han1475.com
#+OPTIONS: num:nil

Keep It Simple & Stupid

* Core

** lexical binding
#+BEGIN_SRC emacs-lisp
  ;; -*- lexical-binding: t -*-
#+END_SRC 

** custom file
use custom.el to avoid rewrite init.el when emacs startup
#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file) 
    (load custom-file))
#+END_SRC

** melpa
#+BEGIN_SRC emacs-lisp
  (setq package-archives 
	'(("gnu" . "https://elpa.gnu.org/packages/")
	  ("melpa" . "https://melpa.org/packages/")
	  ("melpa-stable" . "https://stable.melpa.org/packages/")))
  (package-initialize)
#+END_SRC 

** On-demand installation of packages
#+BEGIN_SRC emacs-lisp
  (defun require-package (package)
    "Ensures that PACKAGE is installed."
    (unless (or (package-installed-p package)
		(require package nil 'noerror))
      (unless (assoc package package-archive-contents)
	(package-refresh-contents))
      (package-install package)))
#+END_SRC

** macro after of with-eval-after-load
with-eval-after-load lets you defer execution of code until after a feature has 
been loaded. This is used extensively throughout the config, so 
wrapping macro has been written for ease of use. 
This is what keeps the config loading fast.

#+BEGIN_SRC emacs-lisp
  (defmacro after (feature &rest body)
    "Executes BODY after FEATURE has been loaded.
  FEATURE may be any one of:
      'evil            => (with-eval-after-load 'evil BODY)
      \"evil-autoloads\" => (with-eval-after-load \"evil-autolaods\" BODY)
      [evil cider]     => (with-eval-after-load 'evil
			    (with-eval-after-load 'cider
			      BODY))
  "
    (declare (indent 1))
    (cond
     ((vectorp feature)
      (let ((prog (macroexp-progn body)))
	(cl-loop for f across feature
		 do
		 (progn
		   (setq prog (append `(',f) `(,prog)))
		   (setq prog (append '(with-eval-after-load) prog))))
	prog))
     (t
      `(with-eval-after-load ,feature ,@body))))
#+END_SRC

** Eighty Column Rule
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
  (add-hook 'text-mode-hook #'display-fill-column-indicator-mode)
  (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+END_SRC

** Electric Pair
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs
	'((?\" . ?\")
	  (?\` . ?\`)
	  (?\( . ?\))
	  (?\{ . ?\})
	  (?\~ . ?\~)))
  (add-hook 'text-mode-hook #'electric-pair-mode)
  (add-hook 'prog-mode-hook #'electric-pair-mode)
#+END_SRC
